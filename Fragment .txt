package com.example.itdev.izinzin.fragment;

import android.content.Intent;
import android.graphics.RectF;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v7.widget.PopupMenu;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;

import com.example.itdev.izinzin.R;
import com.example.itdev.izinzin.activity.OrderDetailActivity;
import com.example.itdev.izinzin.adapter.OrderAdapter;
import com.example.itdev.izinzin.custom.chart.BarMarkerView;
import com.example.itdev.izinzin.model.Note;
import com.example.itdev.izinzin.observer.TimeFilterListener;
import com.example.itdev.izinzin.service.ApiUtils;
import com.example.itdev.izinzin.service.SOService;
import com.example.itdev.izinzin.service.response.ResponseNote;
import com.example.itdev.izinzin.service.response.ResponseTimeline;
import com.example.itdev.izinzin.util.helper.ConstantKey;
import com.example.itdev.izinzin.util.helper.TimeHelper;
import com.example.itdev.izinzin.util.helper.TimeInterval;
import com.example.itdev.izinzin.util.helper.UserUtil;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.github.mikephil.charting.utils.MPPointF;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class OrderFragment extends Fragment implements View.OnClickListener, TimeFilterListener {

    private View view;
    ArrayList<Note> data;
    OrderAdapter adapter;
    ListView lvNote;
    View toolTime;
    TextView txtTime;

    private SOService mService;
    TimeInterval timeInterval;

    BarChart chart;
    List<BarEntry> entries;
    RectF mOnValueSelectedRectF = new RectF();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_order, container, false);
        getActivity().setTitle("Ðon hàng");
        mService = ApiUtils.getSOService();
        timeInterval = TimeHelper.getInstance().getThisMonth();
        initView();
        loadChart();
        return view;
    }

    private void initView() {

        toolTime = view.findViewById(R.id.extra_tool_time);
        toolTime.setOnClickListener(this);
        txtTime = view.findViewById(R.id.extra_tool_time_value);

        chart = view.findViewById(R.id.chart);
        entries = new ArrayList<>();

        data = new ArrayList<>();
        adapter = new OrderAdapter(getActivity(), data);
        lvNote = view.findViewById(R.id.fragment_order_list);
        lvNote.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                Intent detailIntent = new Intent(getActivity(), OrderDetailActivity.class);
                Bundle bundle = new Bundle();
                bundle.putInt(ConstantKey.KEY_PASS_NOTE_ID, data.get(i).getId());
                bundle.putString(ConstantKey.KEY_PASS_NOTE_CODE, data.get(i).getCode());
                detailIntent.putExtras(bundle);
                startActivity(detailIntent);
            }
        });
        lvNote.setAdapter(adapter);
        loadData();
    }

    private void loadData() {
        Map<String, Object> params = new HashMap<>();
        params.put("base", UserUtil.getInstance().getUser().getShopPrefix());
        params.put("user", UserUtil.getInstance().getUser().getId());
        params.put("start_date", timeInterval.getStartTimeToServer());
        params.put("end_date", timeInterval.getEndTimeToServer());
        mService.getOrder(params).enqueue(new Callback<ArrayList<ResponseNote>>() {
            @Override
            public void onResponse(Call<ArrayList<ResponseNote>> call, Response<ArrayList<ResponseNote>> response) {
                if (response.isSuccessful()) {
                    for (int i = 0; i < response.body().size(); i++) {
                        ResponseNote item = response.body().get(i);
                        Note note = new Note();
                        note.setId(Integer.parseInt(item.getId()));
                        note.setCode(item.getCode());
                        note.setPartner(getPartner(item));
                        note.setTime(item.getDateCreated());
                        note.setValue(Long.parseLong(item.getValue()));
                        note.setStatus(Integer.parseInt(item.getStatus()));
                        data.add(note);
                    }
                    adapter.notifyDataSetChanged();
                } else {
                    int statusCode = response.code();
                }
            }

            @Override
            public void onFailure(Call<ArrayList<ResponseNote>> call, Throwable t) {

            }
        });
    }

    private String getPartner(ResponseNote note) {
        String partner = "";
        if (note.getPartnerName() != null) {
            partner = partner + note.getPartnerName();
        } else {
            partner = "Khách l?";
        }
        if (note.getPartnerPhone() != null) {
            partner = partner + " - " + note.getPartnerPhone();
        }
        if (note.getPartnerAddress() != null) {
            partner = partner + " - " + note.getPartnerAddress();
        }
        return partner;
    }

    private void loadChart() {
        Map<String, Object> params = new HashMap<>();
        params.put("base", UserUtil.getInstance().getUser().getShopPrefix());
        params.put("user", UserUtil.getInstance().getUser().getId());
        params.put("start_date", timeInterval.getStartTimeToServer());
        params.put("end_date", timeInterval.getEndTimeToServer());
        mService.getReportOrder(params).enqueue(new Callback<ArrayList<ResponseTimeline>>() {
            @Override
            public void onResponse(Call<ArrayList<ResponseTimeline>> call, Response<ArrayList<ResponseTimeline>> response) {
                if (response.isSuccessful()) {
                    ArrayList<String> label = new ArrayList<>();
                    for (int i = 0; i < response.body().size(); i++) {
                        entries.add(new BarEntry(i + 1, Float.parseFloat(response.body().get(i).getValue())));
                        label.add(response.body().get(i).getDate());
                    }
                    BarDataSet dataset = new BarDataSet(entries, "T?ng ti?n");
                    ArrayList<IBarDataSet> dataSets = new ArrayList<>();
                    dataset.setColor(getActivity().getResources().getColor(R.color.color_status_complete));
                    dataset.setDrawValues(false);
                    dataSets.add(dataset);
                    BarData data2 = new BarData(dataSets);

                    chart.setDrawBarShadow(false);
                    chart.setDrawValueAboveBar(true);
                    chart.getDescription().setEnabled(false);
                    chart.setDrawGridBackground(false);

                    XAxis xAxis = chart.getXAxis();
                    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
                    xAxis.setDrawGridLines(false);
                    xAxis.setGranularity(1f);
                    xAxis.setLabelCount(6);

                    YAxis leftAxis = chart.getAxisLeft();
                    leftAxis.setLabelCount(5, false);
                    leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
                    leftAxis.setSpaceTop(15f);
                    leftAxis.setAxisMinimum(0f);

                    chart.getAxisRight().setEnabled(false);

                    Legend l = chart.getLegend();
                    l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
                    l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
                    l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
                    l.setDrawInside(false);
                    l.setForm(Legend.LegendForm.SQUARE);
                    l.setFormSize(9f);
                    l.setTextSize(11f);
                    l.setXEntrySpace(4f);

                    chart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
                        @Override
                        public void onValueSelected(Entry e, Highlight h) {
                            if (e == null) {
                                return;
                            }
                            RectF bounds = mOnValueSelectedRectF;
                            chart.getBarBounds((BarEntry) e, bounds);
                            MPPointF position = chart.getPosition(e, YAxis.AxisDependency.LEFT);
                            MPPointF.recycleInstance(position);
                        }

                        @Override
                        public void onNothingSelected() {

                        }
                    });

                    chart.setData(data2);
                    BarMarkerView mv = new BarMarkerView(getContext());
                    mv.setChartView(chart);
                    chart.setMarker(mv);
                    chart.invalidate();
                } else {
                    int statusCode = response.code();
                }
            }

            @Override
            public void onFailure(Call<ArrayList<ResponseTimeline>> call, Throwable t) {

            }
        });
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.extra_tool_time:
                showOptionTime();
                break;
            default:
                break;
        }
    }

    private void showOptionTime() {
        PopupMenu popupMenu = new PopupMenu(getActivity(), toolTime);
        popupMenu.getMenuInflater().inflate(R.menu.menu_time_selection_note, popupMenu.getMenu());
        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.time_this_week:
                        filterTime(TimeHelper.getInstance().getThisWeek());
                        break;
                    case R.id.time_this_month:
                        filterTime(TimeHelper.getInstance().getThisMonth());
                        break;
                    case R.id.time_7_days_before:
                        filterTime(TimeHelper.getInstance().get7Days());
                        break;
                    case R.id.time_30_days_before:
                        filterTime(TimeHelper.getInstance().get30Days());
                        break;
                    default:
                        return true;
                }
                return false;
            }
        });
        popupMenu.show();
    }

    @Override
    public void filterTime(TimeInterval interval) {
        switch (interval.getType()) {
            case 1:
                txtTime.setText("Trong tu?n");
                break;
            case 2:
                txtTime.setText("Trong tháng");
                break;
            case 3:
                txtTime.setText("7 ngày qua");
                break;
            case 4:
                txtTime.setText("30 ngày qua");
                break;
            default:
                break;
        }
        changeTime(interval);
    }

    private void changeTime(TimeInterval time){
        txtTime.setText(time.getStartTime()+" - "+time.getEndTime());
        timeInterval = time;
        data.clear();
        loadData();
        entries.clear();
        loadChart();
    }

}
